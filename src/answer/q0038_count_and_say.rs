// q0038_count_and_say 


struct Solution;

const N2C: [char; 9] = ['1','2','3','4','5','6','7','8','9'];

impl Solution {
    pub fn count_and_say(n: i32) -> String {
        if n <= 1 {
            return String::from("1");
        }
        let lastv = Solution::count_and_say(n-1);
        let mut ret = String::new();
        let mut lastc = '0';
        let mut ccount = 0;
        for c in lastv.chars() {
            if lastc == '0' {
                lastc = c;
                ccount += 1;
                continue;
            }
            if lastc == c {
                ccount += 1;
            }else {
                ret.push(N2C[ccount-1]);
                ret.push(lastc);
                lastc = c;
                ccount = 1;
            }
        }
        ret.push(N2C[ccount-1]);
        ret.push(lastc);
        ret
    }
}



#[cfg(test)]
mod tests {
    use super::Solution;

    #[test]
    fn it_works() {
        assert_eq!( Solution::count_and_say( 1), "1");
        assert_eq!( Solution::count_and_say( 2), "11");
        assert_eq!( Solution::count_and_say( 3), "21");
        assert_eq!( Solution::count_and_say( 4), "1211");
        assert_eq!( Solution::count_and_say( 5), "111221");
        assert_eq!( Solution::count_and_say( 6), "312211");
        assert_eq!( Solution::count_and_say( 7), "13112221");
        assert_eq!( Solution::count_and_say( 8), "1113213211");
        assert_eq!( Solution::count_and_say( 9), "31131211131221");
        assert_eq!( Solution::count_and_say( 10), "13211311123113112211");
        assert_eq!( Solution::count_and_say(11), "11131221133112132113212221");
        assert_eq!( Solution::count_and_say(12), "3113112221232112111312211312113211");
        assert_eq!( Solution::count_and_say(13), "1321132132111213122112311311222113111221131221");
        assert_eq!( Solution::count_and_say(14), "11131221131211131231121113112221121321132132211331222113112211");
        assert_eq!( Solution::count_and_say(15), "311311222113111231131112132112311321322112111312211312111322212311322113212221");
        assert_eq!( Solution::count_and_say(16), "132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211");
        assert_eq!( Solution::count_and_say(17), "11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221");
        assert_eq!( Solution::count_and_say(18), "31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211");
        assert_eq!( Solution::count_and_say(19), "1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221");
        assert_eq!( Solution::count_and_say(20), "11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211");
        assert_eq!( Solution::count_and_say(21), "311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221");
        assert_eq!( Solution::count_and_say(22), "132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113213221133122112231131122211211131221131112311332211211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211");
        assert_eq!( Solution::count_and_say(23), "111312211312111322212321121113121112131112132112311321322112111312212321121113122112131112131221121321132132211231131122211331121321232221121113122113121113222123112221221321132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322212321121113122123211231131122113221123113221113122112132113213211121332212311322113212221");
        assert_eq!( Solution::count_and_say
        
    }
}

